{"version":3,"file":"static/js/367.4e6a586b.chunk.js","mappings":"qPAEaA,EAAOC,EAAAA,GAAAA,GAAH,sJAMD,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEJC,EAAOJ,EAAAA,GAAAA,GAAH,0WAGE,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,MAAMC,MAAlB,IASe,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,WAAnB,IAIvBC,EAAST,EAAAA,GAAAA,IAAH,gFAKNU,EAAOV,EAAAA,GAAAA,EAAH,kDACC,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCGnB,EA/Ba,WACX,IAAMQ,ECAsB,WAC5B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOD,EAAP,KAAeE,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAcR,OAZAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBH,GACdI,MAAK,YAAe,IACbC,ECZc,SAAAR,GAC1B,OAAOA,EAAOS,KAAI,kBAAyD,CACzEN,GADgB,EAAGA,GAEnBO,UAFgB,EAAOA,UAGvBC,KAHgB,EAAkBA,KAIlCC,YAJgB,EAAwBC,aAAxB,GAMnB,CDKyBC,CADA,EAAXC,MAEPb,EAAUM,EACX,IACAQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,SAClBlB,EAAU,GACX,GACJ,GAAE,CAACC,IAEGH,CACR,CDjBgBqB,GAEf,OACE,yBACGrB,IAAW,IACV,SAACZ,EAAD,UACGY,EAAOS,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,YAAxB,OACV,UAACnB,EAAD,YACE,SAACK,EAAD,CACEwB,IACEV,EACIW,EAAAA,GAAiBX,EACjB,4FAENY,IAAKb,EACLc,QAAQ,OACRC,MAAO,IACPC,OAAQ,OAEV,SAAC5B,EAAD,UAAOY,KACP,SAACZ,EAAD,UAAOW,MAbEP,EADD,OAmBd,8DAIP,C,uNGhCDyB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAIVC,EAAuB,SAChBC,EAAa,kCAEbC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,UANH,oBAMG,2BACcC,IAFN,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOjBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTR,EAAAA,EAAAA,IAAA,UAZL,gBAYK,kBACGQ,EADH,oBACqBP,EADrB,+CADS,cAC1BI,EAD0B,yBAKzBA,EAASC,MALgB,2CAAH,sDAQlBG,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMQ,EADN,oBACoBT,EADpB,oBADM,cACvBI,EADuB,yBAKtBA,EAASC,MALa,2CAAH,sDAQf5B,EAAgB,mCAAG,WAAMgC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMQ,EADN,4BAC4BT,EAD5B,oBADO,cACxBI,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBK,EAAiB,mCAAG,WAAMD,GAAN,uFACRV,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMQ,EADN,4BAC4BT,EAD5B,oBADQ,cACzBI,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/hooks/useFetchActors.js","utils/actorsMapper.js","services/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  margin-top: ${p => p.theme.space[4]}px;\n`;\nexport const Item = styled.li`\n  width: 275px;\n  height: 425px;\n  border-radius: ${p => p.theme.radii.normal};\n  transition-property: box-shadow, transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  overflow: hidden;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.03);\n    box-shadow: 1px 1px 10px 1px ${p => p.theme.colors.accentColor};\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 398px;\n  object-fit: cover;\n`;\nexport const Name = styled.p`\n  padding-left: ${p => p.theme.space[3]}px; ;\n`;\n","import { useFetchActors } from 'components/hooks/useFetchActors';\nimport * as API from '../../services/API';\nimport { List, Item, Poster, Name } from './Cast.styled';\n\nconst Cast = () => {\n  const actors = useFetchActors();\n\n  return (\n    <div>\n      {actors !== [] ? (\n        <List>\n          {actors.map(({ id, character, name, profilePath }) => (\n            <Item key={id}>\n              <Poster\n                src={\n                  profilePath\n                    ? API.POSTER_URL + profilePath\n                    : 'https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-'\n                }\n                alt={name}\n                loading=\"lazy\"\n                width={250}\n                height={200}\n              />\n              <Name>{name}</Name>\n              <Name>{character}</Name>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>The information about actors yet!</p>\n      )}\n    </div>\n  );\n};\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { searchActorsById } from 'services/API';\nimport { actorsMapper } from 'utils/actorsMapper';\n\nexport const useFetchActors = () => {\n  const [actors, setActors] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    searchActorsById(id)\n      .then(({ cast }) => {\n        const mapActors = actorsMapper(cast);\n        setActors(mapActors);\n      })\n      .catch(error => {\n        console.log(error.message);\n        setActors([]);\n      });\n  }, [id]);\n\n  return actors;\n};\n","export const actorsMapper = actors => {\n  return actors.map(({ id, character, name, profile_path: profilePath }) => ({\n    id,\n    character,\n    name,\n    profilePath,\n  }));\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'd8f6c8593dac3d35659165785d083845';\n\nconst TRENDIND_PATH = '/trending/all/day';\nconst SEARCH_PATH = '/search/movie';\nconst SEARCH_ALL_INFO_PATH = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${TRENDIND_PATH}?page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const searchMoviesByName = async search => {\n  const response = await axios.get(\n    `${SEARCH_PATH}?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const searchMovieById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const searchActorsById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const searchReviewsById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n"],"names":["List","styled","p","theme","space","Item","radii","normal","colors","accentColor","Poster","Name","actors","useState","setActors","id","useParams","useEffect","searchActorsById","then","mapActors","map","character","name","profilePath","profile_path","actorsMapper","cast","catch","error","console","log","message","useFetchActors","src","API","alt","loading","width","height","axios","API_KEY","SEARCH_ALL_INFO_PATH","POSTER_URL","getTrendingMovies","response","data","searchMoviesByName","search","searchMovieById","Id","searchReviewsById"],"sourceRoot":""}