{"version":3,"file":"static/js/961.4dee13c3.chunk.js","mappings":"qPACaA,EAAOC,EAAAA,GAAAA,GAAH,8CACD,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGJC,EAAOJ,EAAAA,GAAAA,GAAH,mIAGE,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACD,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,MAAMC,MAAlB,IACE,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,WAAnB,IAGVC,EAAOT,EAAAA,GAAAA,EAAH,qEACC,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMQ,YAAYC,MAAxB,IAGLC,EAAOZ,EAAAA,GAAAA,EAAH,gDACC,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCkCnB,EA7CgB,WAId,OAA8BU,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAeR,OAbAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,SAAAC,GACJ,IAAMC,EAA2BD,ECnBTE,QACfC,KAAI,kBAAsC,CACvDC,OADiB,EAAGA,OAEpBC,OAFiB,EAAWC,QAG5BX,GAHiB,EAA4BA,GAA5B,IDmBbH,EAAWS,EACZ,IACAM,OAAM,SAAAd,GACLe,QAAQC,IAAIhB,EAAMiB,SAClBhB,EAASD,EAAMiB,SACflB,EAAW,GACZ,GACJ,GAAE,CAACG,KAGF,2BACsB,IAAnBJ,EAAQoB,SAAiBlB,IACxB,SAACJ,EAAD,+DAEDE,EAAQoB,OAAS,IAAMlB,IACtB,yBACGF,IACC,SAACf,EAAD,UACGe,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQV,EAAnB,EAAmBA,GAAnB,OACX,UAACd,EAAD,YACE,UAACK,EAAD,uBACU,0BAAOkB,QAEjB,SAACf,EAAD,UAAOgB,MAJEV,EADA,UAc1B,C,uNElDDiB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAIVC,EAAuB,SAChBC,EAAa,kCAEbC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,UANH,oBAMG,2BACcC,IAFN,cACzBI,EADyB,yBAIxBA,EAASjB,MAJe,2CAAH,qDAOjBkB,EAAkB,mCAAG,WAAMC,GAAN,uFACTP,EAAAA,EAAAA,IAAA,UAZL,gBAYK,kBACGO,EADH,oBACqBN,EADrB,+CADS,cAC1BI,EAD0B,yBAKzBA,EAASjB,MALgB,2CAAH,sDAQlBoB,EAAe,mCAAG,WAAMC,GAAN,uFACNT,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMO,EADN,oBACoBR,EADpB,oBADM,cACvBI,EADuB,yBAKtBA,EAASjB,MALa,2CAAH,sDAQfsB,EAAgB,mCAAG,WAAMD,GAAN,uFACPT,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMO,EADN,4BAC4BR,EAD5B,oBADO,cACxBI,EADwB,yBAKvBA,EAASjB,MALc,2CAAH,sDAQhBF,EAAiB,mCAAG,WAAMuB,GAAN,uFACRT,EAAAA,EAAAA,IAAA,UAClBE,EADkB,YACMO,EADN,4BAC4BR,EAD5B,oBADQ,cACzBI,EADyB,yBAKxBA,EAASjB,MALe,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","utils/reviewsMapper.js","services/API.js"],"sourcesContent":["import styled from 'styled-components';\nexport const List = styled.ul`\n  margin-top: ${p => p.theme.space[5]}px;\n`;\n\nexport const Item = styled.li`\n  width: 100%;\n  height: auto;\n  margin-bottom: ${p => p.theme.space[4]}px;\n  border-radius: ${p => p.theme.radii.normal};\n  border: 2px solid ${p => p.theme.colors.accentColor};\n`;\n\nexport const Name = styled.p`\n  padding-left: ${p => p.theme.space[3]}px;\n  font-weight: ${p => p.theme.fontWeights.medium};\n`;\n\nexport const Text = styled.p`\n  padding-left: ${p => p.theme.space[3]}px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { searchReviewsById } from 'services/API';\nimport { reviewsMapper } from 'utils/reviewsMapper';\nimport { Item, Name, Text, List } from './Reviews.styled';\n// Хук для запиту на інфо\n//import { useFetchReviews } from 'components/hooks/useFetchReviews';\n\nconst Reviews = () => {\n  //Виклик хука\n  //const reviews = useFetchReviews();\n\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    searchReviewsById(id)\n      .then(data => {\n        const mapReviews = reviewsMapper(data);\n        setReviews(mapReviews);\n      })\n      .catch(error => {\n        console.log(error.message);\n        setError(error.message);\n        setReviews([]);\n      });\n  }, [id]);\n\n  return (\n    <div>\n      {reviews.length === 0 && !error && (\n        <Text>There no reviews yet...Please, try another film!</Text>\n      )}\n      {reviews.length > 0 && !error && (\n        <div>\n          {reviews && (\n            <List>\n              {reviews.map(({ author, review, id }) => (\n                <Item key={id}>\n                  <Name>\n                    Author: <span>{author}</span>\n                  </Name>\n                  <Text>{review}</Text>\n                </Item>\n              ))}\n            </List>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","export const reviewsMapper = ({ results }) => {\n  return results.map(({ author, content: review, id }) => ({\n    author,\n    review,\n    id,\n  }));\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'd8f6c8593dac3d35659165785d083845';\n\nconst TRENDIND_PATH = '/trending/all/day';\nconst SEARCH_PATH = '/search/movie';\nconst SEARCH_ALL_INFO_PATH = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${TRENDIND_PATH}?page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const searchMoviesByName = async search => {\n  const response = await axios.get(\n    `${SEARCH_PATH}?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const searchMovieById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const searchActorsById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const searchReviewsById = async Id => {\n  const response = await axios.get(\n    `${SEARCH_ALL_INFO_PATH}/${Id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n"],"names":["List","styled","p","theme","space","Item","radii","normal","colors","accentColor","Name","fontWeights","medium","Text","useState","reviews","setReviews","error","setError","id","useParams","useEffect","searchReviewsById","then","data","mapReviews","results","map","author","review","content","catch","console","log","message","length","axios","API_KEY","SEARCH_ALL_INFO_PATH","POSTER_URL","getTrendingMovies","response","searchMoviesByName","search","searchMovieById","Id","searchActorsById"],"sourceRoot":""}